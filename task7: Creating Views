1. What is a View?
A view is a virtual table built from a SELECT query.
It doesn’t store data itself; it stores the query definition.
When you query the view, the database executes the underlying query and returns results.

2. Basic Syntax
sql
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

view_name → the name of your view
The SELECT can be simple or very complex (joins, aggregations, subqueries).

3. Example: Simple View
Suppose you have a table Employees:
EmpID     	Name     	   Department    	Salary
1	          Alice	       HR	            50000
2	          Bob	         IT	            70000
3	          Charlie	     IT	            80000
4	          Diana	       Finance        60000

Create a view for IT employees only:
CREATE VIEW IT_Employees AS
SELECT EmpID, Name, Salary
FROM Employees
WHERE Department = 'IT';

Usage:
SELECT * FROM IT_Employees;

4. Complex View with Joins & Aggregation
Imagine two tables:

Employees
EmpID, Name, DepartmentID, Salary

Departments
DepartmentID, DeptName

We want a view showing average salary per department:
CREATE VIEW Dept_Salary_Summary AS
SELECT d.DeptName,
       COUNT(e.EmpID) AS NumEmployees,
       AVG(e.Salary) AS AvgSalary
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DepartmentID
GROUP BY d.DeptName;

Usage:
SELECT * FROM Dept_Salary_Summary
WHERE AvgSalary > 60000;

5. Views for Abstraction & Security
Abstraction → Users don’t need to know table structures; they just query the view.
Reusability → Complex queries can be reused without rewriting.
Security → You can expose only certain columns/rows via a view, hiding sensitive data.
Example: Hide salaries from general staff:
CREATE VIEW Public_Employee_Info AS
SELECT Name, Department
FROM Employees;

Now users can query:
SELECT * FROM Public_Employee_Info;
…without ever seeing salary data.

6. Outcome
By practicing with views, you’ll understand:
How to encapsulate reusable SQL logic
How to simplify complex queries
How to control access to sensitive data
